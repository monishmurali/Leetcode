class Solution {
    public int longestPalindrome(String s) {
    /*    //insert elements in the set if we need to get the longest possible palindrome then it will be characters with 2 characters increment by 1 and remove the element from set if they are 2. In the last if the set size is greater than 1 return count +1;
        int count=0;
        HashSet<Character> hs=new HashSet<>();
        for(int i=0;i<s.length();i++)
        {
            if(hs.contains(s.charAt(i)))
            {
                hs.remove(s.charAt(i));
                count++;
            }
            else
            {
                hs.add(s.charAt(i));
            }
        }
        if(hs.size()>0)
        {
            return count*2 +1;
        }
        else
        return count*2;*/
// second method and optimized one
// create array called count and insert frequency of each character by char count array ASCII frequency
//In loop if divide frequency by 2 and multiply by 2 to get how many times 2 pair char repeated if extra character is there add it by checking the remainder is 1. if total sum of charcters%2 is 0 and remainder of i%1 is 1 then increment sum by 1 (only one time for single character)
//
        
        int[] count = new int[128];
        for (char c: s.toCharArray())
            count[c]++;

        int ans = 0;
        for (int v: count) {
            ans += v / 2 * 2;
            if (ans % 2 == 0 && v % 2 == 1)
                ans++;
        }
        return ans;
 


        
    }
}
